// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_state_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_state_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_state_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_state_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_state_2eproto;
class EigenMatrix;
class EigenMatrixDefaultTypeInternal;
extern EigenMatrixDefaultTypeInternal _EigenMatrix_default_instance_;
class EigenMatrixInt;
class EigenMatrixIntDefaultTypeInternal;
extern EigenMatrixIntDefaultTypeInternal _EigenMatrixInt_default_instance_;
class EigenVector;
class EigenVectorDefaultTypeInternal;
extern EigenVectorDefaultTypeInternal _EigenVector_default_instance_;
class LambdaBlock;
class LambdaBlockDefaultTypeInternal;
extern LambdaBlockDefaultTypeInternal _LambdaBlock_default_instance_;
class MultivariateMixtureState;
class MultivariateMixtureStateDefaultTypeInternal;
extern MultivariateMixtureStateDefaultTypeInternal _MultivariateMixtureState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EigenMatrix* Arena::CreateMaybeMessage<::EigenMatrix>(Arena*);
template<> ::EigenMatrixInt* Arena::CreateMaybeMessage<::EigenMatrixInt>(Arena*);
template<> ::EigenVector* Arena::CreateMaybeMessage<::EigenVector>(Arena*);
template<> ::LambdaBlock* Arena::CreateMaybeMessage<::LambdaBlock>(Arena*);
template<> ::MultivariateMixtureState* Arena::CreateMaybeMessage<::MultivariateMixtureState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EigenMatrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EigenMatrix) */ {
 public:
  inline EigenMatrix() : EigenMatrix(nullptr) {}
  virtual ~EigenMatrix();

  EigenMatrix(const EigenMatrix& from);
  EigenMatrix(EigenMatrix&& from) noexcept
    : EigenMatrix() {
    *this = ::std::move(from);
  }

  inline EigenMatrix& operator=(const EigenMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline EigenMatrix& operator=(EigenMatrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EigenMatrix& default_instance();

  static inline const EigenMatrix* internal_default_instance() {
    return reinterpret_cast<const EigenMatrix*>(
               &_EigenMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EigenMatrix& a, EigenMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(EigenMatrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EigenMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EigenMatrix* New() const final {
    return CreateMaybeMessage<EigenMatrix>(nullptr);
  }

  EigenMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EigenMatrix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EigenMatrix& from);
  void MergeFrom(const EigenMatrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EigenMatrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EigenMatrix";
  }
  protected:
  explicit EigenMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated double data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cols = 2;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::uint32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EigenMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class EigenMatrixInt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EigenMatrixInt) */ {
 public:
  inline EigenMatrixInt() : EigenMatrixInt(nullptr) {}
  virtual ~EigenMatrixInt();

  EigenMatrixInt(const EigenMatrixInt& from);
  EigenMatrixInt(EigenMatrixInt&& from) noexcept
    : EigenMatrixInt() {
    *this = ::std::move(from);
  }

  inline EigenMatrixInt& operator=(const EigenMatrixInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline EigenMatrixInt& operator=(EigenMatrixInt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EigenMatrixInt& default_instance();

  static inline const EigenMatrixInt* internal_default_instance() {
    return reinterpret_cast<const EigenMatrixInt*>(
               &_EigenMatrixInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EigenMatrixInt& a, EigenMatrixInt& b) {
    a.Swap(&b);
  }
  inline void Swap(EigenMatrixInt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EigenMatrixInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EigenMatrixInt* New() const final {
    return CreateMaybeMessage<EigenMatrixInt>(nullptr);
  }

  EigenMatrixInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EigenMatrixInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EigenMatrixInt& from);
  void MergeFrom(const EigenMatrixInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EigenMatrixInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EigenMatrixInt";
  }
  protected:
  explicit EigenMatrixInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated int32 data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // uint32 rows = 1;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::uint32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cols = 2;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::uint32 cols() const;
  void set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cols() const;
  void _internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EigenMatrixInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rows_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cols_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class EigenVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EigenVector) */ {
 public:
  inline EigenVector() : EigenVector(nullptr) {}
  virtual ~EigenVector();

  EigenVector(const EigenVector& from);
  EigenVector(EigenVector&& from) noexcept
    : EigenVector() {
    *this = ::std::move(from);
  }

  inline EigenVector& operator=(const EigenVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline EigenVector& operator=(EigenVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EigenVector& default_instance();

  static inline const EigenVector* internal_default_instance() {
    return reinterpret_cast<const EigenVector*>(
               &_EigenVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EigenVector& a, EigenVector& b) {
    a.Swap(&b);
  }
  inline void Swap(EigenVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EigenVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EigenVector* New() const final {
    return CreateMaybeMessage<EigenVector>(nullptr);
  }

  EigenVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EigenVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EigenVector& from);
  void MergeFrom(const EigenVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EigenVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EigenVector";
  }
  protected:
  explicit EigenVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated double data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // uint32 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EigenVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class LambdaBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LambdaBlock) */ {
 public:
  inline LambdaBlock() : LambdaBlock(nullptr) {}
  virtual ~LambdaBlock();

  LambdaBlock(const LambdaBlock& from);
  LambdaBlock(LambdaBlock&& from) noexcept
    : LambdaBlock() {
    *this = ::std::move(from);
  }

  inline LambdaBlock& operator=(const LambdaBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline LambdaBlock& operator=(LambdaBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LambdaBlock& default_instance();

  static inline const LambdaBlock* internal_default_instance() {
    return reinterpret_cast<const LambdaBlock*>(
               &_LambdaBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LambdaBlock& a, LambdaBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(LambdaBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LambdaBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LambdaBlock* New() const final {
    return CreateMaybeMessage<LambdaBlock>(nullptr);
  }

  LambdaBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LambdaBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LambdaBlock& from);
  void MergeFrom(const LambdaBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LambdaBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LambdaBlock";
  }
  protected:
  explicit LambdaBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhiFieldNumber = 2,
    kPsiFieldNumber = 3,
    kLambFieldNumber = 4,
    kTauFieldNumber = 1,
  };
  // .EigenMatrix phi = 2;
  bool has_phi() const;
  private:
  bool _internal_has_phi() const;
  public:
  void clear_phi();
  const ::EigenMatrix& phi() const;
  ::EigenMatrix* release_phi();
  ::EigenMatrix* mutable_phi();
  void set_allocated_phi(::EigenMatrix* phi);
  private:
  const ::EigenMatrix& _internal_phi() const;
  ::EigenMatrix* _internal_mutable_phi();
  public:
  void unsafe_arena_set_allocated_phi(
      ::EigenMatrix* phi);
  ::EigenMatrix* unsafe_arena_release_phi();

  // .EigenMatrix psi = 3;
  bool has_psi() const;
  private:
  bool _internal_has_psi() const;
  public:
  void clear_psi();
  const ::EigenMatrix& psi() const;
  ::EigenMatrix* release_psi();
  ::EigenMatrix* mutable_psi();
  void set_allocated_psi(::EigenMatrix* psi);
  private:
  const ::EigenMatrix& _internal_psi() const;
  ::EigenMatrix* _internal_mutable_psi();
  public:
  void unsafe_arena_set_allocated_psi(
      ::EigenMatrix* psi);
  ::EigenMatrix* unsafe_arena_release_psi();

  // .EigenMatrix lamb = 4;
  bool has_lamb() const;
  private:
  bool _internal_has_lamb() const;
  public:
  void clear_lamb();
  const ::EigenMatrix& lamb() const;
  ::EigenMatrix* release_lamb();
  ::EigenMatrix* mutable_lamb();
  void set_allocated_lamb(::EigenMatrix* lamb);
  private:
  const ::EigenMatrix& _internal_lamb() const;
  ::EigenMatrix* _internal_mutable_lamb();
  public:
  void unsafe_arena_set_allocated_lamb(
      ::EigenMatrix* lamb);
  ::EigenMatrix* unsafe_arena_release_lamb();

  // double tau = 1;
  void clear_tau();
  double tau() const;
  void set_tau(double value);
  private:
  double _internal_tau() const;
  void _internal_set_tau(double value);
  public:

  // @@protoc_insertion_point(class_scope:LambdaBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::EigenMatrix* phi_;
  ::EigenMatrix* psi_;
  ::EigenMatrix* lamb_;
  double tau_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// -------------------------------------------------------------------

class MultivariateMixtureState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MultivariateMixtureState) */ {
 public:
  inline MultivariateMixtureState() : MultivariateMixtureState(nullptr) {}
  virtual ~MultivariateMixtureState();

  MultivariateMixtureState(const MultivariateMixtureState& from);
  MultivariateMixtureState(MultivariateMixtureState&& from) noexcept
    : MultivariateMixtureState() {
    *this = ::std::move(from);
  }

  inline MultivariateMixtureState& operator=(const MultivariateMixtureState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultivariateMixtureState& operator=(MultivariateMixtureState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultivariateMixtureState& default_instance();

  static inline const MultivariateMixtureState* internal_default_instance() {
    return reinterpret_cast<const MultivariateMixtureState*>(
               &_MultivariateMixtureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MultivariateMixtureState& a, MultivariateMixtureState& b) {
    a.Swap(&b);
  }
  inline void Swap(MultivariateMixtureState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultivariateMixtureState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultivariateMixtureState* New() const final {
    return CreateMaybeMessage<MultivariateMixtureState>(nullptr);
  }

  MultivariateMixtureState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultivariateMixtureState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultivariateMixtureState& from);
  void MergeFrom(const MultivariateMixtureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultivariateMixtureState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MultivariateMixtureState";
  }
  protected:
  explicit MultivariateMixtureState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_state_2eproto);
    return ::descriptor_table_state_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAMeansFieldNumber = 4,
    kNaMeansFieldNumber = 5,
    kADeltasFieldNumber = 6,
    kNaDeltasFieldNumber = 7,
    kClusAllocFieldNumber = 10,
    kEtasFieldNumber = 12,
    kAJumpsFieldNumber = 8,
    kNaJumpsFieldNumber = 9,
    kSigmaBarFieldNumber = 13,
    kLambBlockFieldNumber = 14,
    kMaFieldNumber = 1,
    kMnaFieldNumber = 2,
    kUFieldNumber = 11,
    kMtotFieldNumber = 3,
  };
  // repeated .EigenVector a_means = 4;
  int a_means_size() const;
  private:
  int _internal_a_means_size() const;
  public:
  void clear_a_means();
  ::EigenVector* mutable_a_means(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_a_means();
  private:
  const ::EigenVector& _internal_a_means(int index) const;
  ::EigenVector* _internal_add_a_means();
  public:
  const ::EigenVector& a_means(int index) const;
  ::EigenVector* add_a_means();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      a_means() const;

  // repeated .EigenVector na_means = 5;
  int na_means_size() const;
  private:
  int _internal_na_means_size() const;
  public:
  void clear_na_means();
  ::EigenVector* mutable_na_means(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_na_means();
  private:
  const ::EigenVector& _internal_na_means(int index) const;
  ::EigenVector* _internal_add_na_means();
  public:
  const ::EigenVector& na_means(int index) const;
  ::EigenVector* add_na_means();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      na_means() const;

  // repeated .EigenMatrix a_deltas = 6;
  int a_deltas_size() const;
  private:
  int _internal_a_deltas_size() const;
  public:
  void clear_a_deltas();
  ::EigenMatrix* mutable_a_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
      mutable_a_deltas();
  private:
  const ::EigenMatrix& _internal_a_deltas(int index) const;
  ::EigenMatrix* _internal_add_a_deltas();
  public:
  const ::EigenMatrix& a_deltas(int index) const;
  ::EigenMatrix* add_a_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
      a_deltas() const;

  // repeated .EigenMatrix na_deltas = 7;
  int na_deltas_size() const;
  private:
  int _internal_na_deltas_size() const;
  public:
  void clear_na_deltas();
  ::EigenMatrix* mutable_na_deltas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
      mutable_na_deltas();
  private:
  const ::EigenMatrix& _internal_na_deltas(int index) const;
  ::EigenMatrix* _internal_add_na_deltas();
  public:
  const ::EigenMatrix& na_deltas(int index) const;
  ::EigenMatrix* add_na_deltas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
      na_deltas() const;

  // repeated int32 clus_alloc = 10;
  int clus_alloc_size() const;
  private:
  int _internal_clus_alloc_size() const;
  public:
  void clear_clus_alloc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clus_alloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_clus_alloc() const;
  void _internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_clus_alloc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 clus_alloc(int index) const;
  void set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      clus_alloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_clus_alloc();

  // repeated .EigenVector etas = 12;
  int etas_size() const;
  private:
  int _internal_etas_size() const;
  public:
  void clear_etas();
  ::EigenVector* mutable_etas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
      mutable_etas();
  private:
  const ::EigenVector& _internal_etas(int index) const;
  ::EigenVector* _internal_add_etas();
  public:
  const ::EigenVector& etas(int index) const;
  ::EigenVector* add_etas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
      etas() const;

  // .EigenVector a_jumps = 8;
  bool has_a_jumps() const;
  private:
  bool _internal_has_a_jumps() const;
  public:
  void clear_a_jumps();
  const ::EigenVector& a_jumps() const;
  ::EigenVector* release_a_jumps();
  ::EigenVector* mutable_a_jumps();
  void set_allocated_a_jumps(::EigenVector* a_jumps);
  private:
  const ::EigenVector& _internal_a_jumps() const;
  ::EigenVector* _internal_mutable_a_jumps();
  public:
  void unsafe_arena_set_allocated_a_jumps(
      ::EigenVector* a_jumps);
  ::EigenVector* unsafe_arena_release_a_jumps();

  // .EigenVector na_jumps = 9;
  bool has_na_jumps() const;
  private:
  bool _internal_has_na_jumps() const;
  public:
  void clear_na_jumps();
  const ::EigenVector& na_jumps() const;
  ::EigenVector* release_na_jumps();
  ::EigenVector* mutable_na_jumps();
  void set_allocated_na_jumps(::EigenVector* na_jumps);
  private:
  const ::EigenVector& _internal_na_jumps() const;
  ::EigenVector* _internal_mutable_na_jumps();
  public:
  void unsafe_arena_set_allocated_na_jumps(
      ::EigenVector* na_jumps);
  ::EigenVector* unsafe_arena_release_na_jumps();

  // .EigenVector sigma_bar = 13;
  bool has_sigma_bar() const;
  private:
  bool _internal_has_sigma_bar() const;
  public:
  void clear_sigma_bar();
  const ::EigenVector& sigma_bar() const;
  ::EigenVector* release_sigma_bar();
  ::EigenVector* mutable_sigma_bar();
  void set_allocated_sigma_bar(::EigenVector* sigma_bar);
  private:
  const ::EigenVector& _internal_sigma_bar() const;
  ::EigenVector* _internal_mutable_sigma_bar();
  public:
  void unsafe_arena_set_allocated_sigma_bar(
      ::EigenVector* sigma_bar);
  ::EigenVector* unsafe_arena_release_sigma_bar();

  // .LambdaBlock lamb_block = 14;
  bool has_lamb_block() const;
  private:
  bool _internal_has_lamb_block() const;
  public:
  void clear_lamb_block();
  const ::LambdaBlock& lamb_block() const;
  ::LambdaBlock* release_lamb_block();
  ::LambdaBlock* mutable_lamb_block();
  void set_allocated_lamb_block(::LambdaBlock* lamb_block);
  private:
  const ::LambdaBlock& _internal_lamb_block() const;
  ::LambdaBlock* _internal_mutable_lamb_block();
  public:
  void unsafe_arena_set_allocated_lamb_block(
      ::LambdaBlock* lamb_block);
  ::LambdaBlock* unsafe_arena_release_lamb_block();

  // int32 ma = 1;
  void clear_ma();
  ::PROTOBUF_NAMESPACE_ID::int32 ma() const;
  void set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ma() const;
  void _internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mna = 2;
  void clear_mna();
  ::PROTOBUF_NAMESPACE_ID::int32 mna() const;
  void set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mna() const;
  void _internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double u = 11;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // int32 mtot = 3;
  void clear_mtot();
  ::PROTOBUF_NAMESPACE_ID::int32 mtot() const;
  void set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mtot() const;
  void _internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MultivariateMixtureState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > a_means_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > na_means_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix > a_deltas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix > na_deltas_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > clus_alloc_;
  mutable std::atomic<int> _clus_alloc_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector > etas_;
  ::EigenVector* a_jumps_;
  ::EigenVector* na_jumps_;
  ::EigenVector* sigma_bar_;
  ::LambdaBlock* lamb_block_;
  ::PROTOBUF_NAMESPACE_ID::int32 ma_;
  ::PROTOBUF_NAMESPACE_ID::int32 mna_;
  double u_;
  ::PROTOBUF_NAMESPACE_ID::int32 mtot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_state_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EigenMatrix

// uint32 rows = 1;
inline void EigenMatrix::clear_rows() {
  rows_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::rows() const {
  // @@protoc_insertion_point(field_get:EigenMatrix.rows)
  return _internal_rows();
}
inline void EigenMatrix::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rows_ = value;
}
inline void EigenMatrix::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:EigenMatrix.rows)
}

// uint32 cols = 2;
inline void EigenMatrix::clear_cols() {
  cols_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrix::cols() const {
  // @@protoc_insertion_point(field_get:EigenMatrix.cols)
  return _internal_cols();
}
inline void EigenMatrix::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cols_ = value;
}
inline void EigenMatrix::set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:EigenMatrix.cols)
}

// repeated double data = 3;
inline int EigenMatrix::_internal_data_size() const {
  return data_.size();
}
inline int EigenMatrix::data_size() const {
  return _internal_data_size();
}
inline void EigenMatrix::clear_data() {
  data_.Clear();
}
inline double EigenMatrix::_internal_data(int index) const {
  return data_.Get(index);
}
inline double EigenMatrix::data(int index) const {
  // @@protoc_insertion_point(field_get:EigenMatrix.data)
  return _internal_data(index);
}
inline void EigenMatrix::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:EigenMatrix.data)
}
inline void EigenMatrix::_internal_add_data(double value) {
  data_.Add(value);
}
inline void EigenMatrix::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:EigenMatrix.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenMatrix::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenMatrix::data() const {
  // @@protoc_insertion_point(field_list:EigenMatrix.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenMatrix::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenMatrix::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:EigenMatrix.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// EigenMatrixInt

// uint32 rows = 1;
inline void EigenMatrixInt::clear_rows() {
  rows_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrixInt::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrixInt::rows() const {
  // @@protoc_insertion_point(field_get:EigenMatrixInt.rows)
  return _internal_rows();
}
inline void EigenMatrixInt::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rows_ = value;
}
inline void EigenMatrixInt::set_rows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:EigenMatrixInt.rows)
}

// uint32 cols = 2;
inline void EigenMatrixInt::clear_cols() {
  cols_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrixInt::_internal_cols() const {
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenMatrixInt::cols() const {
  // @@protoc_insertion_point(field_get:EigenMatrixInt.cols)
  return _internal_cols();
}
inline void EigenMatrixInt::_internal_set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cols_ = value;
}
inline void EigenMatrixInt::set_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:EigenMatrixInt.cols)
}

// repeated int32 data = 3;
inline int EigenMatrixInt::_internal_data_size() const {
  return data_.size();
}
inline int EigenMatrixInt::data_size() const {
  return _internal_data_size();
}
inline void EigenMatrixInt::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EigenMatrixInt::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EigenMatrixInt::data(int index) const {
  // @@protoc_insertion_point(field_get:EigenMatrixInt.data)
  return _internal_data(index);
}
inline void EigenMatrixInt::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:EigenMatrixInt.data)
}
inline void EigenMatrixInt::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void EigenMatrixInt::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:EigenMatrixInt.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EigenMatrixInt::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
EigenMatrixInt::data() const {
  // @@protoc_insertion_point(field_list:EigenMatrixInt.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EigenMatrixInt::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
EigenMatrixInt::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:EigenMatrixInt.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// EigenVector

// uint32 size = 1;
inline void EigenVector::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenVector::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EigenVector::size() const {
  // @@protoc_insertion_point(field_get:EigenVector.size)
  return _internal_size();
}
inline void EigenVector::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void EigenVector::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:EigenVector.size)
}

// repeated double data = 2;
inline int EigenVector::_internal_data_size() const {
  return data_.size();
}
inline int EigenVector::data_size() const {
  return _internal_data_size();
}
inline void EigenVector::clear_data() {
  data_.Clear();
}
inline double EigenVector::_internal_data(int index) const {
  return data_.Get(index);
}
inline double EigenVector::data(int index) const {
  // @@protoc_insertion_point(field_get:EigenVector.data)
  return _internal_data(index);
}
inline void EigenVector::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:EigenVector.data)
}
inline void EigenVector::_internal_add_data(double value) {
  data_.Add(value);
}
inline void EigenVector::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:EigenVector.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenVector::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
EigenVector::data() const {
  // @@protoc_insertion_point(field_list:EigenVector.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenVector::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
EigenVector::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:EigenVector.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// LambdaBlock

// double tau = 1;
inline void LambdaBlock::clear_tau() {
  tau_ = 0;
}
inline double LambdaBlock::_internal_tau() const {
  return tau_;
}
inline double LambdaBlock::tau() const {
  // @@protoc_insertion_point(field_get:LambdaBlock.tau)
  return _internal_tau();
}
inline void LambdaBlock::_internal_set_tau(double value) {
  
  tau_ = value;
}
inline void LambdaBlock::set_tau(double value) {
  _internal_set_tau(value);
  // @@protoc_insertion_point(field_set:LambdaBlock.tau)
}

// .EigenMatrix phi = 2;
inline bool LambdaBlock::_internal_has_phi() const {
  return this != internal_default_instance() && phi_ != nullptr;
}
inline bool LambdaBlock::has_phi() const {
  return _internal_has_phi();
}
inline void LambdaBlock::clear_phi() {
  if (GetArena() == nullptr && phi_ != nullptr) {
    delete phi_;
  }
  phi_ = nullptr;
}
inline const ::EigenMatrix& LambdaBlock::_internal_phi() const {
  const ::EigenMatrix* p = phi_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenMatrix&>(
      ::_EigenMatrix_default_instance_);
}
inline const ::EigenMatrix& LambdaBlock::phi() const {
  // @@protoc_insertion_point(field_get:LambdaBlock.phi)
  return _internal_phi();
}
inline void LambdaBlock::unsafe_arena_set_allocated_phi(
    ::EigenMatrix* phi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phi_);
  }
  phi_ = phi;
  if (phi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LambdaBlock.phi)
}
inline ::EigenMatrix* LambdaBlock::release_phi() {
  
  ::EigenMatrix* temp = phi_;
  phi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenMatrix* LambdaBlock::unsafe_arena_release_phi() {
  // @@protoc_insertion_point(field_release:LambdaBlock.phi)
  
  ::EigenMatrix* temp = phi_;
  phi_ = nullptr;
  return temp;
}
inline ::EigenMatrix* LambdaBlock::_internal_mutable_phi() {
  
  if (phi_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenMatrix>(GetArena());
    phi_ = p;
  }
  return phi_;
}
inline ::EigenMatrix* LambdaBlock::mutable_phi() {
  // @@protoc_insertion_point(field_mutable:LambdaBlock.phi)
  return _internal_mutable_phi();
}
inline void LambdaBlock::set_allocated_phi(::EigenMatrix* phi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete phi_;
  }
  if (phi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(phi);
    if (message_arena != submessage_arena) {
      phi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phi, submessage_arena);
    }
    
  } else {
    
  }
  phi_ = phi;
  // @@protoc_insertion_point(field_set_allocated:LambdaBlock.phi)
}

// .EigenMatrix psi = 3;
inline bool LambdaBlock::_internal_has_psi() const {
  return this != internal_default_instance() && psi_ != nullptr;
}
inline bool LambdaBlock::has_psi() const {
  return _internal_has_psi();
}
inline void LambdaBlock::clear_psi() {
  if (GetArena() == nullptr && psi_ != nullptr) {
    delete psi_;
  }
  psi_ = nullptr;
}
inline const ::EigenMatrix& LambdaBlock::_internal_psi() const {
  const ::EigenMatrix* p = psi_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenMatrix&>(
      ::_EigenMatrix_default_instance_);
}
inline const ::EigenMatrix& LambdaBlock::psi() const {
  // @@protoc_insertion_point(field_get:LambdaBlock.psi)
  return _internal_psi();
}
inline void LambdaBlock::unsafe_arena_set_allocated_psi(
    ::EigenMatrix* psi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(psi_);
  }
  psi_ = psi;
  if (psi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LambdaBlock.psi)
}
inline ::EigenMatrix* LambdaBlock::release_psi() {
  
  ::EigenMatrix* temp = psi_;
  psi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenMatrix* LambdaBlock::unsafe_arena_release_psi() {
  // @@protoc_insertion_point(field_release:LambdaBlock.psi)
  
  ::EigenMatrix* temp = psi_;
  psi_ = nullptr;
  return temp;
}
inline ::EigenMatrix* LambdaBlock::_internal_mutable_psi() {
  
  if (psi_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenMatrix>(GetArena());
    psi_ = p;
  }
  return psi_;
}
inline ::EigenMatrix* LambdaBlock::mutable_psi() {
  // @@protoc_insertion_point(field_mutable:LambdaBlock.psi)
  return _internal_mutable_psi();
}
inline void LambdaBlock::set_allocated_psi(::EigenMatrix* psi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete psi_;
  }
  if (psi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(psi);
    if (message_arena != submessage_arena) {
      psi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psi, submessage_arena);
    }
    
  } else {
    
  }
  psi_ = psi;
  // @@protoc_insertion_point(field_set_allocated:LambdaBlock.psi)
}

// .EigenMatrix lamb = 4;
inline bool LambdaBlock::_internal_has_lamb() const {
  return this != internal_default_instance() && lamb_ != nullptr;
}
inline bool LambdaBlock::has_lamb() const {
  return _internal_has_lamb();
}
inline void LambdaBlock::clear_lamb() {
  if (GetArena() == nullptr && lamb_ != nullptr) {
    delete lamb_;
  }
  lamb_ = nullptr;
}
inline const ::EigenMatrix& LambdaBlock::_internal_lamb() const {
  const ::EigenMatrix* p = lamb_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenMatrix&>(
      ::_EigenMatrix_default_instance_);
}
inline const ::EigenMatrix& LambdaBlock::lamb() const {
  // @@protoc_insertion_point(field_get:LambdaBlock.lamb)
  return _internal_lamb();
}
inline void LambdaBlock::unsafe_arena_set_allocated_lamb(
    ::EigenMatrix* lamb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lamb_);
  }
  lamb_ = lamb;
  if (lamb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:LambdaBlock.lamb)
}
inline ::EigenMatrix* LambdaBlock::release_lamb() {
  
  ::EigenMatrix* temp = lamb_;
  lamb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenMatrix* LambdaBlock::unsafe_arena_release_lamb() {
  // @@protoc_insertion_point(field_release:LambdaBlock.lamb)
  
  ::EigenMatrix* temp = lamb_;
  lamb_ = nullptr;
  return temp;
}
inline ::EigenMatrix* LambdaBlock::_internal_mutable_lamb() {
  
  if (lamb_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenMatrix>(GetArena());
    lamb_ = p;
  }
  return lamb_;
}
inline ::EigenMatrix* LambdaBlock::mutable_lamb() {
  // @@protoc_insertion_point(field_mutable:LambdaBlock.lamb)
  return _internal_mutable_lamb();
}
inline void LambdaBlock::set_allocated_lamb(::EigenMatrix* lamb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lamb_;
  }
  if (lamb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lamb);
    if (message_arena != submessage_arena) {
      lamb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lamb, submessage_arena);
    }
    
  } else {
    
  }
  lamb_ = lamb;
  // @@protoc_insertion_point(field_set_allocated:LambdaBlock.lamb)
}

// -------------------------------------------------------------------

// MultivariateMixtureState

// int32 ma = 1;
inline void MultivariateMixtureState::clear_ma() {
  ma_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_ma() const {
  return ma_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::ma() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.ma)
  return _internal_ma();
}
inline void MultivariateMixtureState::_internal_set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ma_ = value;
}
inline void MultivariateMixtureState::set_ma(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ma(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.ma)
}

// int32 mna = 2;
inline void MultivariateMixtureState::clear_mna() {
  mna_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_mna() const {
  return mna_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::mna() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.mna)
  return _internal_mna();
}
inline void MultivariateMixtureState::_internal_set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mna_ = value;
}
inline void MultivariateMixtureState::set_mna(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mna(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.mna)
}

// int32 mtot = 3;
inline void MultivariateMixtureState::clear_mtot() {
  mtot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_mtot() const {
  return mtot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::mtot() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.mtot)
  return _internal_mtot();
}
inline void MultivariateMixtureState::_internal_set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mtot_ = value;
}
inline void MultivariateMixtureState::set_mtot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mtot(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.mtot)
}

// repeated .EigenVector a_means = 4;
inline int MultivariateMixtureState::_internal_a_means_size() const {
  return a_means_.size();
}
inline int MultivariateMixtureState::a_means_size() const {
  return _internal_a_means_size();
}
inline void MultivariateMixtureState::clear_a_means() {
  a_means_.Clear();
}
inline ::EigenVector* MultivariateMixtureState::mutable_a_means(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_means)
  return a_means_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
MultivariateMixtureState::mutable_a_means() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.a_means)
  return &a_means_;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_a_means(int index) const {
  return a_means_.Get(index);
}
inline const ::EigenVector& MultivariateMixtureState::a_means(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_means)
  return _internal_a_means(index);
}
inline ::EigenVector* MultivariateMixtureState::_internal_add_a_means() {
  return a_means_.Add();
}
inline ::EigenVector* MultivariateMixtureState::add_a_means() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.a_means)
  return _internal_add_a_means();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
MultivariateMixtureState::a_means() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.a_means)
  return a_means_;
}

// repeated .EigenVector na_means = 5;
inline int MultivariateMixtureState::_internal_na_means_size() const {
  return na_means_.size();
}
inline int MultivariateMixtureState::na_means_size() const {
  return _internal_na_means_size();
}
inline void MultivariateMixtureState::clear_na_means() {
  na_means_.Clear();
}
inline ::EigenVector* MultivariateMixtureState::mutable_na_means(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_means)
  return na_means_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
MultivariateMixtureState::mutable_na_means() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.na_means)
  return &na_means_;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_na_means(int index) const {
  return na_means_.Get(index);
}
inline const ::EigenVector& MultivariateMixtureState::na_means(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_means)
  return _internal_na_means(index);
}
inline ::EigenVector* MultivariateMixtureState::_internal_add_na_means() {
  return na_means_.Add();
}
inline ::EigenVector* MultivariateMixtureState::add_na_means() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.na_means)
  return _internal_add_na_means();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
MultivariateMixtureState::na_means() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.na_means)
  return na_means_;
}

// repeated .EigenMatrix a_deltas = 6;
inline int MultivariateMixtureState::_internal_a_deltas_size() const {
  return a_deltas_.size();
}
inline int MultivariateMixtureState::a_deltas_size() const {
  return _internal_a_deltas_size();
}
inline void MultivariateMixtureState::clear_a_deltas() {
  a_deltas_.Clear();
}
inline ::EigenMatrix* MultivariateMixtureState::mutable_a_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_deltas)
  return a_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
MultivariateMixtureState::mutable_a_deltas() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.a_deltas)
  return &a_deltas_;
}
inline const ::EigenMatrix& MultivariateMixtureState::_internal_a_deltas(int index) const {
  return a_deltas_.Get(index);
}
inline const ::EigenMatrix& MultivariateMixtureState::a_deltas(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_deltas)
  return _internal_a_deltas(index);
}
inline ::EigenMatrix* MultivariateMixtureState::_internal_add_a_deltas() {
  return a_deltas_.Add();
}
inline ::EigenMatrix* MultivariateMixtureState::add_a_deltas() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.a_deltas)
  return _internal_add_a_deltas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
MultivariateMixtureState::a_deltas() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.a_deltas)
  return a_deltas_;
}

// repeated .EigenMatrix na_deltas = 7;
inline int MultivariateMixtureState::_internal_na_deltas_size() const {
  return na_deltas_.size();
}
inline int MultivariateMixtureState::na_deltas_size() const {
  return _internal_na_deltas_size();
}
inline void MultivariateMixtureState::clear_na_deltas() {
  na_deltas_.Clear();
}
inline ::EigenMatrix* MultivariateMixtureState::mutable_na_deltas(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_deltas)
  return na_deltas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >*
MultivariateMixtureState::mutable_na_deltas() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.na_deltas)
  return &na_deltas_;
}
inline const ::EigenMatrix& MultivariateMixtureState::_internal_na_deltas(int index) const {
  return na_deltas_.Get(index);
}
inline const ::EigenMatrix& MultivariateMixtureState::na_deltas(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_deltas)
  return _internal_na_deltas(index);
}
inline ::EigenMatrix* MultivariateMixtureState::_internal_add_na_deltas() {
  return na_deltas_.Add();
}
inline ::EigenMatrix* MultivariateMixtureState::add_na_deltas() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.na_deltas)
  return _internal_add_na_deltas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenMatrix >&
MultivariateMixtureState::na_deltas() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.na_deltas)
  return na_deltas_;
}

// .EigenVector a_jumps = 8;
inline bool MultivariateMixtureState::_internal_has_a_jumps() const {
  return this != internal_default_instance() && a_jumps_ != nullptr;
}
inline bool MultivariateMixtureState::has_a_jumps() const {
  return _internal_has_a_jumps();
}
inline void MultivariateMixtureState::clear_a_jumps() {
  if (GetArena() == nullptr && a_jumps_ != nullptr) {
    delete a_jumps_;
  }
  a_jumps_ = nullptr;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_a_jumps() const {
  const ::EigenVector* p = a_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& MultivariateMixtureState::a_jumps() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.a_jumps)
  return _internal_a_jumps();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_a_jumps(
    ::EigenVector* a_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a_jumps_);
  }
  a_jumps_ = a_jumps;
  if (a_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.a_jumps)
}
inline ::EigenVector* MultivariateMixtureState::release_a_jumps() {
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::unsafe_arena_release_a_jumps() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.a_jumps)
  
  ::EigenVector* temp = a_jumps_;
  a_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::_internal_mutable_a_jumps() {
  
  if (a_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    a_jumps_ = p;
  }
  return a_jumps_;
}
inline ::EigenVector* MultivariateMixtureState::mutable_a_jumps() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.a_jumps)
  return _internal_mutable_a_jumps();
}
inline void MultivariateMixtureState::set_allocated_a_jumps(::EigenVector* a_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a_jumps_;
  }
  if (a_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a_jumps);
    if (message_arena != submessage_arena) {
      a_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a_jumps, submessage_arena);
    }
    
  } else {
    
  }
  a_jumps_ = a_jumps;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.a_jumps)
}

// .EigenVector na_jumps = 9;
inline bool MultivariateMixtureState::_internal_has_na_jumps() const {
  return this != internal_default_instance() && na_jumps_ != nullptr;
}
inline bool MultivariateMixtureState::has_na_jumps() const {
  return _internal_has_na_jumps();
}
inline void MultivariateMixtureState::clear_na_jumps() {
  if (GetArena() == nullptr && na_jumps_ != nullptr) {
    delete na_jumps_;
  }
  na_jumps_ = nullptr;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_na_jumps() const {
  const ::EigenVector* p = na_jumps_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& MultivariateMixtureState::na_jumps() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.na_jumps)
  return _internal_na_jumps();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_na_jumps(
    ::EigenVector* na_jumps) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(na_jumps_);
  }
  na_jumps_ = na_jumps;
  if (na_jumps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.na_jumps)
}
inline ::EigenVector* MultivariateMixtureState::release_na_jumps() {
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::unsafe_arena_release_na_jumps() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.na_jumps)
  
  ::EigenVector* temp = na_jumps_;
  na_jumps_ = nullptr;
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::_internal_mutable_na_jumps() {
  
  if (na_jumps_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    na_jumps_ = p;
  }
  return na_jumps_;
}
inline ::EigenVector* MultivariateMixtureState::mutable_na_jumps() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.na_jumps)
  return _internal_mutable_na_jumps();
}
inline void MultivariateMixtureState::set_allocated_na_jumps(::EigenVector* na_jumps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete na_jumps_;
  }
  if (na_jumps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(na_jumps);
    if (message_arena != submessage_arena) {
      na_jumps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, na_jumps, submessage_arena);
    }
    
  } else {
    
  }
  na_jumps_ = na_jumps;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.na_jumps)
}

// repeated int32 clus_alloc = 10;
inline int MultivariateMixtureState::_internal_clus_alloc_size() const {
  return clus_alloc_.size();
}
inline int MultivariateMixtureState::clus_alloc_size() const {
  return _internal_clus_alloc_size();
}
inline void MultivariateMixtureState::clear_clus_alloc() {
  clus_alloc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::_internal_clus_alloc(int index) const {
  return clus_alloc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MultivariateMixtureState::clus_alloc(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.clus_alloc)
  return _internal_clus_alloc(index);
}
inline void MultivariateMixtureState::set_clus_alloc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.clus_alloc)
}
inline void MultivariateMixtureState::_internal_add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  clus_alloc_.Add(value);
}
inline void MultivariateMixtureState::add_clus_alloc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_clus_alloc(value);
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.clus_alloc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultivariateMixtureState::_internal_clus_alloc() const {
  return clus_alloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MultivariateMixtureState::clus_alloc() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.clus_alloc)
  return _internal_clus_alloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultivariateMixtureState::_internal_mutable_clus_alloc() {
  return &clus_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MultivariateMixtureState::mutable_clus_alloc() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.clus_alloc)
  return _internal_mutable_clus_alloc();
}

// double u = 11;
inline void MultivariateMixtureState::clear_u() {
  u_ = 0;
}
inline double MultivariateMixtureState::_internal_u() const {
  return u_;
}
inline double MultivariateMixtureState::u() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.u)
  return _internal_u();
}
inline void MultivariateMixtureState::_internal_set_u(double value) {
  
  u_ = value;
}
inline void MultivariateMixtureState::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:MultivariateMixtureState.u)
}

// repeated .EigenVector etas = 12;
inline int MultivariateMixtureState::_internal_etas_size() const {
  return etas_.size();
}
inline int MultivariateMixtureState::etas_size() const {
  return _internal_etas_size();
}
inline void MultivariateMixtureState::clear_etas() {
  etas_.Clear();
}
inline ::EigenVector* MultivariateMixtureState::mutable_etas(int index) {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.etas)
  return etas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >*
MultivariateMixtureState::mutable_etas() {
  // @@protoc_insertion_point(field_mutable_list:MultivariateMixtureState.etas)
  return &etas_;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_etas(int index) const {
  return etas_.Get(index);
}
inline const ::EigenVector& MultivariateMixtureState::etas(int index) const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.etas)
  return _internal_etas(index);
}
inline ::EigenVector* MultivariateMixtureState::_internal_add_etas() {
  return etas_.Add();
}
inline ::EigenVector* MultivariateMixtureState::add_etas() {
  // @@protoc_insertion_point(field_add:MultivariateMixtureState.etas)
  return _internal_add_etas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EigenVector >&
MultivariateMixtureState::etas() const {
  // @@protoc_insertion_point(field_list:MultivariateMixtureState.etas)
  return etas_;
}

// .EigenVector sigma_bar = 13;
inline bool MultivariateMixtureState::_internal_has_sigma_bar() const {
  return this != internal_default_instance() && sigma_bar_ != nullptr;
}
inline bool MultivariateMixtureState::has_sigma_bar() const {
  return _internal_has_sigma_bar();
}
inline void MultivariateMixtureState::clear_sigma_bar() {
  if (GetArena() == nullptr && sigma_bar_ != nullptr) {
    delete sigma_bar_;
  }
  sigma_bar_ = nullptr;
}
inline const ::EigenVector& MultivariateMixtureState::_internal_sigma_bar() const {
  const ::EigenVector* p = sigma_bar_;
  return p != nullptr ? *p : reinterpret_cast<const ::EigenVector&>(
      ::_EigenVector_default_instance_);
}
inline const ::EigenVector& MultivariateMixtureState::sigma_bar() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.sigma_bar)
  return _internal_sigma_bar();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_sigma_bar(
    ::EigenVector* sigma_bar) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sigma_bar_);
  }
  sigma_bar_ = sigma_bar;
  if (sigma_bar) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.sigma_bar)
}
inline ::EigenVector* MultivariateMixtureState::release_sigma_bar() {
  
  ::EigenVector* temp = sigma_bar_;
  sigma_bar_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::unsafe_arena_release_sigma_bar() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.sigma_bar)
  
  ::EigenVector* temp = sigma_bar_;
  sigma_bar_ = nullptr;
  return temp;
}
inline ::EigenVector* MultivariateMixtureState::_internal_mutable_sigma_bar() {
  
  if (sigma_bar_ == nullptr) {
    auto* p = CreateMaybeMessage<::EigenVector>(GetArena());
    sigma_bar_ = p;
  }
  return sigma_bar_;
}
inline ::EigenVector* MultivariateMixtureState::mutable_sigma_bar() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.sigma_bar)
  return _internal_mutable_sigma_bar();
}
inline void MultivariateMixtureState::set_allocated_sigma_bar(::EigenVector* sigma_bar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sigma_bar_;
  }
  if (sigma_bar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sigma_bar);
    if (message_arena != submessage_arena) {
      sigma_bar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sigma_bar, submessage_arena);
    }
    
  } else {
    
  }
  sigma_bar_ = sigma_bar;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.sigma_bar)
}

// .LambdaBlock lamb_block = 14;
inline bool MultivariateMixtureState::_internal_has_lamb_block() const {
  return this != internal_default_instance() && lamb_block_ != nullptr;
}
inline bool MultivariateMixtureState::has_lamb_block() const {
  return _internal_has_lamb_block();
}
inline void MultivariateMixtureState::clear_lamb_block() {
  if (GetArena() == nullptr && lamb_block_ != nullptr) {
    delete lamb_block_;
  }
  lamb_block_ = nullptr;
}
inline const ::LambdaBlock& MultivariateMixtureState::_internal_lamb_block() const {
  const ::LambdaBlock* p = lamb_block_;
  return p != nullptr ? *p : reinterpret_cast<const ::LambdaBlock&>(
      ::_LambdaBlock_default_instance_);
}
inline const ::LambdaBlock& MultivariateMixtureState::lamb_block() const {
  // @@protoc_insertion_point(field_get:MultivariateMixtureState.lamb_block)
  return _internal_lamb_block();
}
inline void MultivariateMixtureState::unsafe_arena_set_allocated_lamb_block(
    ::LambdaBlock* lamb_block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lamb_block_);
  }
  lamb_block_ = lamb_block;
  if (lamb_block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MultivariateMixtureState.lamb_block)
}
inline ::LambdaBlock* MultivariateMixtureState::release_lamb_block() {
  
  ::LambdaBlock* temp = lamb_block_;
  lamb_block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::LambdaBlock* MultivariateMixtureState::unsafe_arena_release_lamb_block() {
  // @@protoc_insertion_point(field_release:MultivariateMixtureState.lamb_block)
  
  ::LambdaBlock* temp = lamb_block_;
  lamb_block_ = nullptr;
  return temp;
}
inline ::LambdaBlock* MultivariateMixtureState::_internal_mutable_lamb_block() {
  
  if (lamb_block_ == nullptr) {
    auto* p = CreateMaybeMessage<::LambdaBlock>(GetArena());
    lamb_block_ = p;
  }
  return lamb_block_;
}
inline ::LambdaBlock* MultivariateMixtureState::mutable_lamb_block() {
  // @@protoc_insertion_point(field_mutable:MultivariateMixtureState.lamb_block)
  return _internal_mutable_lamb_block();
}
inline void MultivariateMixtureState::set_allocated_lamb_block(::LambdaBlock* lamb_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lamb_block_;
  }
  if (lamb_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lamb_block);
    if (message_arena != submessage_arena) {
      lamb_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lamb_block, submessage_arena);
    }
    
  } else {
    
  }
  lamb_block_ = lamb_block;
  // @@protoc_insertion_point(field_set_allocated:MultivariateMixtureState.lamb_block)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_state_2eproto
